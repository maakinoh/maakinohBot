cmake_minimum_required(VERSION 2.8.7)
project(cpr-example)

if(NOT ${CMAKE_VERSION} LESS 3.2)
    set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
    set(CMAKE_CXX_EXTENSIONS ON)
else()
    message(STATUS "Checking compiler flags for C++11 support.")
    # Set C++11 support flags for various compilers
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-std=c++17" COMPILER_SUPPORTS_CXX11)
    check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if(COMPILER_SUPPORTS_CXX11)
        message(STATUS "C++11 is supported.")
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -stdlib=libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
        endif()
    elseif(COMPILER_SUPPORTS_CXX0X)
        message(STATUS "C++0x is supported.")
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -stdlib=libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
        endif()
    else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif()
endif()
option(FOO_USE_EXTERNAL_JSON "Use an external JSON library" OFF)

set (CMAKE_AUTOMOC ON)
add_subdirectory(opt)
include_directories(include)
include_directories(opt/lua-5.3.0/src)
add_executable(maakinohBot src/maakinohBot/application.cpp include/maakinohBot/application.hpp include/maakinohBot/models/parseable_object.hpp include/maakinohBot/telegram/bot.hpp include/maakinohBot/models/user.hpp src/maakinohBot/models/user.cpp include/maakinohBot/models/message.hpp include/maakinohBot/models/chat.hpp include/maakinohBot/plugin/plugin_handler.hpp src/maakinohBot/plugin/plugin_handler.cpp include/maakinohBot/telegram/http_handler.hpp src/maakinohBot/telegram/http_handler.cpp)

target_link_libraries(maakinohBot ${CPR_LIBRARIES} liblua pthread)
target_link_libraries(maakinohBot PRIVATE nlohmann_json::nlohmann_json)

include_directories(${CPR_INCLUDE_DIRS} ${JSON_INCLUDE_DIRS})
